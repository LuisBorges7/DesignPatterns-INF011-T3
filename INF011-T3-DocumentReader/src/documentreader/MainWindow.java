/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package documentreader;

import interfaces.IDocument;
import pdfdocument.PDFDocument;
import java.awt.ScrollPane;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileSystemView;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;

/**
 *
 * @author luisborges
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new java.awt.ScrollPane();
        jToolBar1 = new javax.swing.JToolBar();
        backwardButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Document Reader");
        setAlwaysOnTop(true);

        jToolBar1.setRollover(true);

        backwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left-arrow.png"))); // NOI18N
        backwardButton.setFocusable(false);
        backwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(backwardButton);

        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/right-arrow.png"))); // NOI18N
        forwardButton.setFocusable(false);
        forwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(forwardButton);

        fileMenu.setText("File");

        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open-16x16.png"))); // NOI18N
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit-16x16.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        jMenuItem1.setText("luisborges.contato@gmail.com");
        helpMenu.add(jMenuItem1);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = jfc.showOpenDialog(null);
        if ((returnValue == JFileChooser.APPROVE_OPTION) && !(returnValue == JFileChooser.CANCEL_OPTION)) {
            selectedFile = jfc.getSelectedFile();
            String extensionFile = selectedFile.getName().split("\\.")[1];
            if (matchExtension(extensionFile)){
                JOptionPane.showMessageDialog(jpanel,"A extensão (." + extensionFile.toUpperCase() + ") é suportada.");
                try {
                    checkMap(extensionFile);                    
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(jpanel, "Não é possível abrir arquivos com a extensão (." + extensionFile.toUpperCase() + ")."); 
                return;
            }
            try {
                document = Loader.loadPDF(new File(selectedFile.toString()));
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            return;
        }
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void backwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardButtonActionPerformed
        if (currentPage > 0){
             currentPage--;
             showDocument(currentPage);
        }
    }

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        //(currentPage < pdfDoc.images.size()-1)
        if (currentPage < myDoc.getNumPages()){
            currentPage++;
            showDocument(currentPage);
        }      
    }
    
        public static boolean matchExtension(String extension){
        if (pluginsSupportedExtensions.isEmpty()){
            return (extension.equals(pluginsSupportedExtensions.get(0)));
        }else{
            for(int i = 0; i < pluginsSupportedExtensions.size(); i++){
                if(extension.equals(pluginsSupportedExtensions.get(i))){
                    return true;
                }
            }
        }
        return false;
    }
    
    private void checkMap(String fileExtension) throws ClassNotFoundException, InstantiationException, IllegalAccessException{
        for (String key : nameAndExtensionPlugin.keySet()) {
            //Capturamos o valor a partir da chave
            String value = nameAndExtensionPlugin.get(key);
            if(key.equals(fileExtension)){
                System.out.println("Chave " + key + " = " + value + " encontrada");
                createDocument(value);
            }
            System.out.println(key + " = " + value);
        }
    }
    
    private void createDocument(String value) throws ClassNotFoundException, InstantiationException, IllegalAccessException{
        myDoc = (IDocument) Class.forName(value.toLowerCase() + "." + value, true, ulc).newInstance();
        myDoc.open(selectedFile);
        scrollPane1.add(myDoc.getEditor(0));       
    }
        
    private void showDocument(int currentPage){
        scrollPane1.add(myDoc.getEditor(currentPage));       
    }

    /**
     * @param args the command line arguments
     * @throws java.net.MalformedURLException
     * @throws java.lang.ClassNotFoundException
     * @throws java.lang.InstantiationException
     * @throws java.lang.IllegalAccessException
     */
    public static void main(String args[]) throws MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new MainWindow().setVisible(true);
            MainWindow frame = new MainWindow();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
        
        File currentDir = new File("./plugins");
        String[] plugins = currentDir.list();
        int pluginLength;
        pluginLength = plugins.length;
        if(pluginLength > 1)
            System.out.println("0" + pluginLength + " Plugins were found:");
        else
            if(pluginLength == 1)
                System.out.println("0" + pluginLength + " Plugin was found:");
        
        jars = new URL[pluginLength];
        String documentPlugin = "";
        ulc = new URLClassLoader(jars);

        for(int i = 0; i < plugins.length; i++){
            System.out.println(i+1 + " - " + plugins[i].split("\\.")[0]);
            jars[i] = (new File("./plugins/" + plugins[i])).toURL();
            documentPlugin = (plugins[i].split("\\.")[0]);
            IDocument myPlugin = (IDocument) Class.forName(documentPlugin.toLowerCase() + "." + documentPlugin, true, ulc).newInstance();
            System.out.println("Extensão " + myPlugin.supportedExtension() + " encontrada!");
            pluginsSupportedExtensions.add(myPlugin.supportedExtension());
            nameAndExtensionPlugin.put(myPlugin.supportedExtension(), new String(documentPlugin));
        }
    }
    
    private static IDocument myDoc;
    private static JFileChooser jfc;
    ArrayList<String> aulas = new ArrayList<>();
    private static final ArrayList<String> pluginsSupportedExtensions = new ArrayList<>();
    private static final Map<String, String> nameAndExtensionPlugin = new HashMap<String, String>();
     private static URLClassLoader ulc;
    private static URL[] jars;
    PDFDocument pdfDoc = new PDFDocument();
    private File selectedFile;
    ArrayList<Icon> images = new ArrayList<>();
    BufferedImage image = null;
    ScrollPane scrollPane = new ScrollPane();
    private int currentPage = 0;
    PDDocument document = null;
    JPanel jpanel = new JPanel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton forwardButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem openMenuItem;
    private java.awt.ScrollPane scrollPane1;
    // End of variables declaration//GEN-END:variables
}